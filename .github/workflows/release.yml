name: Release

on:
  push:
    branches:
      - 'main'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    outputs:
      hasNextVersion: ${{ steps.get_next_version.outputs.hasNextVersion }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.ADMIN_TOKEN }}

      - name: Get next version
        id: get_next_version
        uses: thenativeweb/get-next-version@2.6.3

      - name: Setup Node
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        run: npm install

      - name: Setup Git user
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create new version
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        run: |
          npm version --no-git-tag-version ${{steps.get_next_version.outputs.version}}
          npm run fix:analyze
          git add .
          git commit -m "chore: bump package version to ${{steps.get_next_version.outputs.version}} [skip ci]"
          git push

      - name: Create new tag
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        run: |
          git tag ${{steps.get_next_version.outputs.version}}
          git push origin ${{steps.get_next_version.outputs.version}}

      - name: Build the application
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        run: npm run build

      - name: Distribute app as ZIP file
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        run: |
          mv ./dist ./${{ github.event.repository.name }}-${{steps.get_next_version.outputs.version}}
          zip -r ${{ github.event.repository.name }}-${{steps.get_next_version.outputs.version}}.zip ./${{ github.event.repository.name }}-${{steps.get_next_version.outputs.version}}

      - name: Release app
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_next_version.outputs.version }}
          artifacts: "./${{ github.event.repository.name }}-${{steps.get_next_version.outputs.version}}.zip"

      - name: Set up QEMU
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub container registry
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: github-actions
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        uses: docker/build-push-action@v6
        env:
          DOCKER_REPOSITORY: ghcr.io/${{ github.repository }}
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKER_REPOSITORY }}:latest,${{ env.DOCKER_REPOSITORY }}:${{steps.get_next_version.outputs.version}}